/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 * Default config options for add_read_depth.nf. Inspired by https://github.com/nf-core/methylseq/blob/master/nextflow.config
 */

// Global default params, used in configs
params {

  // Workflow flags
  fasta = "genome.fa"
  input = "input.tsv"
  outdir = './results'

  // Boilerplate options
  name = false
  email = false
  email_on_fail = false
  plaintext_email = false
  monochrome_logs = false
  help = false
  params.project = false
  params.clusterOptions = false
  tracedir = "${params.outdir}/pipeline_info"

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// Load base.config by default for all pipelines
includeConfig "$baseDir/base.config"

// Load profiles
profiles {
  conda { process.conda = "$baseDir/add_read_depth.yml" }
  annuna { includeConfig "$baseDir/annuna.config" }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-e']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
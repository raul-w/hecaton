nextflow.enable.dsl=1

process {
	executor = 'slurm'
	queue = 'your_queue'
}

// Global default params, used in configs
params {
  tracedir = "${params.output_dir}/pipeline_info"

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

process {
  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 4.GB * task.attempt, 'memory') }
  time = { check_max( 2.h * task.attempt, 'time') }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Resource requirements
  withLabel:exclude_reads {
    cpus = 1
    memory = { check_max( 500.m * task.attempt, 'memory') }
    time = { check_max( 1.h * task.attempt, 'time') }
  }
  withLabel:bwa {
    cpus = { check_max( 12 * task.attempt, 'cpus') }
    memory = { check_max( 2.GB * task.attempt, 'memory') }
    time = { check_max( 5.h * task.attempt, 'time') }
  }
  withLabel:mark_duplicates {
    cpus = 1
    memory = { check_max( 8.GB * task.attempt, 'memory') }
    time = { check_max( 3.h * task.attempt, 'time') }
  }
  withLabel:multithreading {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 4.GB * task.attempt, 'memory') }
    time = { check_max( 3.h * task.attempt, 'time') }
  }
  withLabel:lumpy {
    memory = { check_max( 7.GB * task.attempt, 'memory') }
    time = { check_max( 5.h * task.attempt, 'time') }
  }
  withLabel:delly {
    memory = { check_max( 4.GB * task.attempt, 'memory') }
    time = { check_max( 5.h * task.attempt, 'time') }
  }
  withLabel:gridss {
    memory = { check_max( 12.GB * task.attempt, 'memory') }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-e']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}



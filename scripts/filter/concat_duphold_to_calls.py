#!/usr/bin/env python3

"""
Concatenate depth stats of regions to a BEDPE file with CNV calls
"""

import pandas as pd
import argparse
import sys
from xopen import xopen


def parse_cl_args(in_args):
    """
    Parse command line arguments

    :param in_args: All command line arguments
    :return: None
    """
    description = "Add duphold statistics to detected BEDPE"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("-i", "--detected_bedpe", type=str,
                        help="Path to bedpe file containing calls")
    parser.add_argument("-d", "--depth_vcf", type=str,
                        help="Path to duphold VCF file depth statistics")
    parser.add_argument("-o", "--output_bedpe", type=str,
                        help="Name of bedpe output file")
    args = parser.parse_args(in_args)
    return args

def concat_columns(input_bedpe, depth_fn, output_bedpe):
    """Concatenate columns with depth stats generated by duphold to training set

    :param input_bedpe: Path to bedpe file containing calls
    :param depth_fn: Path to VCF file containing depth stats
    :param output_bedpe: Path to output bedpe file
    :return: 0
    """
    # load data frame of input bed
    input_df = pd.read_csv(input_bedpe, sep="\t")
    if input_df.empty:
        # add empty columns
        new_column_headers = ["Chrom_norm_depth", "GC_norm_depth", "Flank_norm_depth"]
        input_df = input_df.reindex(columns=input_df.columns.tolist() + new_column_headers)
        # write dataframe to bedpe file
        input_df.to_csv(output_bedpe, sep="\t", index=False)
        return 0
    # go through VCF file, getting out depth stats
    chrom_norm_depths = []
    gc_norm_depths = []
    flank_norm_depths = []
    with xopen(depth_fn) as depth_vcf:
        for line in depth_vcf:
            # skip header lines
            if line.startswith("#"):
                continue
            # get sample field
            line_elems = line.strip().split()
            sample_field = line_elems[9]
            # attain all normalized depths
            sample_elems = sample_field.split(":")
            chrom_norm_depth = sample_elems[1]
            chrom_norm_depths.append(chrom_norm_depth)
            gc_norm_depth = sample_elems[3]
            gc_norm_depths.append(gc_norm_depth)
            flank_norm_depth = sample_elems[2]
            flank_norm_depths.append(flank_norm_depth)
    # add depths to dataframe
    input_df["Chrom_norm_depth"] = chrom_norm_depths
    input_df["GC_norm_depth"] = gc_norm_depths
    input_df["Flank_norm_depth"] = flank_norm_depths
    # write bedpe to output
    input_df.to_csv(output_bedpe, sep="\t", index=False)
    return 0

def main():
    args = parse_cl_args(sys.argv[1:])
    # concatenate column
    concat_columns(args.detected_bedpe, args.depth_vcf, args.output_bedpe)

if __name__ == "__main__":
    main()